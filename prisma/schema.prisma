// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum ROLE_TYPE {
  Customer
  Admin
  BusinessOwner
}

type IMAGE_TYPE {
  url  String
  path String
}

model User {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String    @unique
  phoneNumber String
  role        ROLE_TYPE @default(Customer)
  isLoggedIn  Boolean   @default(false)
  password    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt()

  @@map("USER")
}

model Hotel {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  address           String
  images            IMAGE_TYPE[]
  amenities         String[]
  city              City?            @relation(fields: [cityId], references: [id], onDelete: Cascade)
  popularLocality   PopularLocality? @relation(fields: [popularLocalityId], references: [id])
  latitude          Float?
  longitude         Float?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt()
  cityId            String?          @db.ObjectId
  popularLocalityId String?          @db.ObjectId
  Room              Room[]

  @@map("HOTEL")
}

enum ROOM_TYPE {
  Classic
  Suite
  Deluxe
}

model Room {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  roomType   ROOM_TYPE
  facility   String[]
  roomSize   String
  price      Int
  roomImages IMAGE_TYPE[]
  hotel      Hotel        @relation(fields: [hotelId], references: [id])
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt()
  hotelId    String       @db.ObjectId

  @@map("ROOM")
}

model City {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt()
  PopularLocality PopularLocality[]
  Hotel           Hotel[]

  @@map("CITIES")
}

model PopularLocality {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  popularLocalityName String
  city                City     @relation(fields: [cityId], references: [id], onDelete: Cascade)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt()
  cityId              String   @db.ObjectId
  Hotel               Hotel[]

  @@map("POPULAR_LOCALITY")
}
